{"ast":null,"code":"var _jsxFileName = \"/Users/grantwatson/Desktop/Development/ReactJS/Watsyn-Jarvis/src/components/ClientData/clientForm.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport fire from '../Firebase/fire';\n\nclass ClientForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this._handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this._saveClient = (key, title, index, e) => {\n      if (this.state.businessName === \"\" || this.state.businessEmail === \"\" || this.state.businessNumber === \"\" || this.state.contactName === \"\" || this.state.contactEmail === \"\" || this.state.contactNumber === \"\") {\n        alert(\"Client information cannot be empty\");\n      } else {\n        const newClientKey = fire.database().ref(\"clients/\").push().key;\n        fire.database().ref(\"clients/\").update({\n          [newClientKey]: {\n            listKey: key.key,\n            businessName: title.title\n          }\n        });\n        this.setState({\n          businessName: \"\",\n          businessEmail: \"\",\n          businessNumber: \"\",\n          contactName: \"\",\n          contactEmail: \"\",\n          contactNumber: \"\"\n        });\n      }\n    };\n\n    this._handleDeleteClient = key => {\n      fire.database().ref(\"cards/\".concat(key)).remove();\n      console.log(\"Successfully deleted Client\");\n      const myClientLength = this.state.dataClient.length; // console.log(myCardLength)\n\n      if (myClientLength === 1) {\n        this.setState({\n          dataClient: []\n        });\n      }\n    };\n\n    this.toggle = e => {\n      this.setState(prevState => ({\n        editing: !prevState.editing\n      }));\n    };\n\n    this.state = {\n      businessName: \"\",\n      businessEmail: \"\",\n      businessNumber: \"\",\n      contactName: \"\",\n      contactEmail: \"\",\n      contactNumber: \"\",\n      dataClient: [],\n      clientList: []\n    };\n  }\n\n  componentDidMount() {\n    const clientEntry = fire.database().ref(\"client/\");\n    clientEntry.on(\"value\", snapshot => {\n      const clientEntryFromDatabase = snapshot.val();\n\n      if (clientEntryFromDatabase === null) {\n        console.log(\"Client at our firebase is null\");\n      } else {\n        const clients = Object.keys(snapshot.val()).map(key => {\n          return {\n            key: key,\n            businessName: clientEntryFromDatabase[key].businessName,\n            businessEmail: clientEntryFromDatabase[key].businessEmail,\n            businessNumber: clientEntryFromDatabase[key].businessNumber,\n            contactName: clientEntryFromDatabase[key].contactName,\n            contactEmail: clientEntryFromDatabase[key].contactEmail,\n            contactNumber: clientEntryFromDatabase[key].contactNumber,\n            listKey: clientEntryFromDatabase[key].listKey\n          };\n        });\n        this.setState({\n          dataClient: clients\n        });\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"exampleEmail\",\n      placeholder: \"with a placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"examplePassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"examplePassword\",\n      placeholder: \"password placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Text Area\"), React.createElement(Input, {\n      type: \"textarea\",\n      name: \"text\",\n      id: \"exampleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleFile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"File\"), React.createElement(Input, {\n      type: \"file\",\n      name: \"file\",\n      id: \"exampleFile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(FormText, {\n      color: \"muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"This is some placeholder block-level help text for the above input. It's a bit lighter and easily wraps to a new line.\")), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default ClientForm;","map":{"version":3,"sources":["/Users/grantwatson/Desktop/Development/ReactJS/Watsyn-Jarvis/src/components/ClientData/clientForm.js"],"names":["React","Component","Button","Form","FormGroup","Label","Input","FormText","fire","ClientForm","constructor","props","_handleChange","e","setState","target","name","value","_saveClient","key","title","index","state","businessName","businessEmail","businessNumber","contactName","contactEmail","contactNumber","alert","newClientKey","database","ref","push","update","listKey","_handleDeleteClient","remove","console","log","myClientLength","dataClient","length","toggle","prevState","editing","clientList","componentDidMount","clientEntry","on","snapshot","clientEntryFromDatabase","val","clients","Object","keys","map","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport fire from '../Firebase/fire';\n\nclass ClientForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessName: \"\",\n            businessEmail: \"\",\n            businessNumber: \"\",\n            contactName: \"\",\n            contactEmail: \"\",\n            contactNumber: \"\",\n            dataClient: [],\n            clientList: []\n        };\n    }\n    componentDidMount() {\n        const clientEntry = fire.database().ref(\"client/\");\n        clientEntry.on(\"value\", snapshot => {\n            const clientEntryFromDatabase = snapshot.val();\n            if (clientEntryFromDatabase === null) {\n                console.log(\"Client at our firebase is null\");\n            } else {\n                const clients = Object.keys(snapshot.val()).map(key => {\n                    return {\n                        key: key,\n                        businessName: clientEntryFromDatabase[key].businessName,\n                        businessEmail: clientEntryFromDatabase[key].businessEmail,\n                        businessNumber: clientEntryFromDatabase[key].businessNumber,\n                        contactName: clientEntryFromDatabase[key].contactName,\n                        contactEmail: clientEntryFromDatabase[key].contactEmail,\n                        contactNumber: clientEntryFromDatabase[key].contactNumber,\n                        listKey: clientEntryFromDatabase[key].listKey\n                    };\n                });\n                this.setState({\n                    dataClient: clients\n                });\n            }\n        })\n    }\n\n    _handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    _saveClient = (key, title, index, e) => {\n        if (this.state.businessName === \"\" ||\n            this.state.businessEmail === \"\" ||\n            this.state.businessNumber === \"\" ||\n            this.state.contactName === \"\" ||\n            this.state.contactEmail === \"\" ||\n            this.state.contactNumber === \"\") {\n            alert(\"Client information cannot be empty\");\n        } else {\n            const newClientKey = fire\n                .database()\n                .ref(\"clients/\")\n                .push().key;\n\n            fire\n                .database()\n                .ref(\"clients/\")\n                .update({\n                    [newClientKey]: {\n                        listKey: key.key,\n                        businessName: title.title\n                    }\n                });\n\n            this.setState({\n                businessName: \"\",\n                businessEmail: \"\",\n                businessNumber: \"\",\n                contactName: \"\",\n                contactEmail: \"\",\n                contactNumber: \"\"\n            });\n        }\n    };\n\n    _handleDeleteClient = key => {\n        fire\n            .database()\n            .ref(`cards/${key}`)\n            .remove();\n\n        console.log(\"Successfully deleted Client\");\n        const myClientLength = this.state.dataClient.length;\n        // console.log(myCardLength)\n        if (myClientLength === 1) {\n            this.setState({\n                dataClient: []\n            });\n        }\n    };\n\n    toggle = e => {\n        this.setState(prevState => ({\n            editing: !prevState.editing\n        }));\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Form>\n                    <FormGroup>\n                        <Label for=\"exampleEmail\">Email</Label>\n                        <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"with a placeholder\" />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"examplePassword\">Password</Label>\n                        <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password placeholder\" />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"exampleText\">Text Area</Label>\n                        <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"exampleFile\">File</Label>\n                        <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n                        <FormText color=\"muted\">\n                            This is some placeholder block-level help text for the above input.\n                            It's a bit lighter and easily wraps to a new line.\n                        </FormText>\n                    </FormGroup>\n                    <Button>Submit</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default ClientForm;"]},"metadata":{},"sourceType":"module"}