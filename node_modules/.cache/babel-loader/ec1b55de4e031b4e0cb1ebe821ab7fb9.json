{"ast":null,"code":"import _objectSpread from \"/Users/grantwatson/Desktop/Development/ReactJS/Watsyn-Jarvis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport 'firebase/auth';\nimport 'firebase/database';\nimport app from 'firebase/app';\nconst config = {\n  apiKey: \"AIzaSyC97J_aJvwG0eOcgVp0dEnmgVrHMkXQ4oc\",\n  authDomain: \"jarvis-5b51a.firebaseapp.com\",\n  databaseURL: \"https://jarvis-5b51a.firebaseio.com\",\n  projectId: \"jarvis-5b51a\",\n  storageBucket: \"jarvis-5b51a.appspot.com\",\n  messagingSenderId: \"57523789256\"\n};\n\nclass fire {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n    this.doSignInWithTwitter = () => this.auth.signInWithPopup(this.twitterProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    this.message = uid => this.db.ref(`messages/${uid}`);\n\n    this.messages = () => this.db.ref('messages');\n\n    app.initializeApp(config);\n    /* Helper */\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  } // *** Auth API ***\n\n\n}\n\nexport default fire;","map":{"version":3,"sources":["/Users/grantwatson/Desktop/Development/ReactJS/Watsyn-Jarvis/src/components/Firebase/fire.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","fire","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","process","env","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":"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","sourcesContent":["import 'firebase/auth';\nimport 'firebase/database';\nimport app from 'firebase/app';\n\n\nconst config = {\n    apiKey: \"AIzaSyC97J_aJvwG0eOcgVp0dEnmgVrHMkXQ4oc\",\n    authDomain: \"jarvis-5b51a.firebaseapp.com\",\n    databaseURL: \"https://jarvis-5b51a.firebaseio.com\",\n    projectId: \"jarvis-5b51a\",\n    storageBucket: \"jarvis-5b51a.appspot.com\",\n    messagingSenderId: \"57523789256\",\n};\n\nclass fire {\n    constructor() {\n      app.initializeApp(config);\n  \n      /* Helper */\n  \n      this.serverValue = app.database.ServerValue;\n      this.emailAuthProvider = app.auth.EmailAuthProvider;\n  \n      /* Firebase APIs */\n  \n      this.auth = app.auth();\n      this.db = app.database();\n  \n      /* Social Sign In Method Provider */\n  \n      this.googleProvider = new app.auth.GoogleAuthProvider();\n      this.facebookProvider = new app.auth.FacebookAuthProvider();\n      this.twitterProvider = new app.auth.TwitterAuthProvider();\n    }\n  \n    // *** Auth API ***\n  \n    doCreateUserWithEmailAndPassword = (email, password) =>\n      this.auth.createUserWithEmailAndPassword(email, password);\n  \n    doSignInWithEmailAndPassword = (email, password) =>\n      this.auth.signInWithEmailAndPassword(email, password);\n  \n    doSignInWithGoogle = () =>\n      this.auth.signInWithPopup(this.googleProvider);\n  \n    doSignInWithFacebook = () =>\n      this.auth.signInWithPopup(this.facebookProvider);\n  \n    doSignInWithTwitter = () =>\n      this.auth.signInWithPopup(this.twitterProvider);\n  \n    doSignOut = () => this.auth.signOut();\n  \n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  \n    doSendEmailVerification = () =>\n      this.auth.currentUser.sendEmailVerification({\n        url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n      });\n  \n    doPasswordUpdate = password =>\n      this.auth.currentUser.updatePassword(password);\n  \n    // *** Merge Auth and DB User API *** //\n  \n    onAuthUserListener = (next, fallback) =>\n      this.auth.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.user(authUser.uid)\n            .once('value')\n            .then(snapshot => {\n              const dbUser = snapshot.val();\n  \n              // default empty roles\n              if (!dbUser.roles) {\n                dbUser.roles = {};\n              }\n  \n              // merge auth and db user\n              authUser = {\n                uid: authUser.uid,\n                email: authUser.email,\n                emailVerified: authUser.emailVerified,\n                providerData: authUser.providerData,\n                ...dbUser,\n              };\n  \n              next(authUser);\n            });\n        } else {\n          fallback();\n        }\n      });\n  \n    // *** User API ***\n  \n    user = uid => this.db.ref(`users/${uid}`);\n  \n    users = () => this.db.ref('users');\n  \n    // *** Message API ***\n  \n    message = uid => this.db.ref(`messages/${uid}`);\n  \n    messages = () => this.db.ref('messages');\n  }\n  \n  export default fire;\n  "]},"metadata":{},"sourceType":"module"}