{"ast":null,"code":"var _jsxFileName = \"/Users/grantwatson/Desktop/Development/ReactJS/Watsyn-Jarvis/src/components/Data/Data.js\";\nimport React, { Component } from \"react\";\nimport fire from \"../Firebase/fire\";\nimport { CardDeck, Col, Card, CardHeader, Button, CardBody, CardText, CardFooter, Modal, ModalBody, ModalFooter } from \"reactstrap\";\n\nclass Data extends Component {\n  constructor() {\n    super();\n\n    this._handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this._saveList = e => {\n      if (this.state.listName === \"\") {\n        alert(\"List cannot be empty\");\n      } else {\n        const newListKey = fire.database().ref(\"lists/\").push().key;\n        fire.database().ref(\"lists/\").update({\n          [newListKey]: {\n            listName: this.state.listName\n          }\n        });\n        this.setState({\n          listName: \"\"\n        });\n      }\n    };\n\n    this._saveCard = (key, title, index, e) => {\n      // console.log(\"key from card\");\n      // console.log(key.key);\n      // console.log(\"title from card:\");\n      // console.log(title.title);\n      if (this.state.cardName === \"\") {\n        alert(\"Card cannot be empty\");\n      } else {\n        const newCardKey = fire.database().ref(\"cards/\").push().key;\n        fire.database().ref(\"cards/\").update({\n          [newCardKey]: {\n            listKey: key.key,\n            cardName: title.title\n          }\n        });\n        this.setState({\n          cardName: \"\"\n        });\n      }\n    };\n\n    this._handleDeleteList = key => {\n      const dataCards = this.state.dataCards;\n      console.log(dataCards);\n      let countCardOnList = 0;\n\n      for (let i = 0; i < dataCards.length; i++) {\n        if (key === dataCards[i].listKey) {\n          countCardOnList++;\n        }\n      }\n\n      console.log(\"countCardOnList: \" + countCardOnList);\n\n      if (countCardOnList > 0) {\n        for (let i = 0; i < dataCards.length; i++) {\n          if (key === dataCards[i].listKey) {\n            this._handleDeleteCard(dataCards[i].key);\n          }\n        }\n      }\n\n      fire.database().ref(`lists/${key}`).remove();\n      console.log(\"Success delete List\");\n      const myListLength = this.state.dataLists.length;\n\n      if (myListLength === 1) {\n        this.setState({\n          dataLists: []\n        });\n      }\n    };\n\n    this._handleDeleteCard = key => {\n      fire.database().ref(`cards/${key}`).remove();\n      console.log(\"Success delete Card\");\n      const myCardLength = this.state.dataCards.length; // console.log(myCardLength)\n\n      if (myCardLength === 1) {\n        this.setState({\n          dataCards: []\n        });\n      }\n    };\n\n    this._handleMoveCard = (keyOfCard, moveByIndex) => {\n      const _this$state = this.state,\n            dataCards = _this$state.dataCards,\n            dataLists = _this$state.dataLists; // Get key from List destination movement\n      // console.log(keyOfCard);\n\n      const moveToAnotherList = dataLists[moveByIndex].key; // console.log(moveToAnotherList);\n\n      let newKeyOfCard;\n\n      for (let i = 0; i < dataCards.length; i++) {\n        if (keyOfCard === dataCards[i].key) {\n          newKeyOfCard = i;\n        }\n      } // console.log(newKeyOfCard);\n\n\n      const newCard = dataCards[newKeyOfCard]; // console.log(newCard);\n\n      fire.database().ref(\"cards/\").update({\n        [newCard.key]: {\n          listKey: moveToAnotherList,\n          cardName: newCard.cardName\n        }\n      });\n    };\n\n    this._handleChooseCard = key => {\n      // console.log(key);\n      const dataCards = this.state.dataCards; // console.log(dataCards);\n\n      let indexOfCard;\n\n      for (let i = 0; i < dataCards.length; i++) {\n        if (key === dataCards[i].key) {\n          // console.log(dataCards[i].cardName);\n          indexOfCard = i;\n        }\n      }\n\n      const editCard = dataCards[indexOfCard]; // console.log(editCard.cardName);\n\n      this.setState({\n        editCardName: editCard.cardName,\n        keyCard: key,\n        keyList: editCard.listKey\n      });\n    };\n\n    this._handleEdit = () => {\n      const _this$state2 = this.state,\n            editCardName = _this$state2.editCardName,\n            keyCard = _this$state2.keyCard,\n            keyList = _this$state2.keyList; // console.log(editCardName);\n      // console.log(keyCard);\n\n      if (editCardName !== \"\") {\n        // console.log(\"You can edit\");\n        fire.database().ref(\"cards/\").update({\n          [keyCard]: {\n            cardName: editCardName,\n            listKey: keyList\n          }\n        });\n      } else {\n        // console.log(\"You can't edit\");\n        alert(\"Card cannot be empty\");\n      }\n    };\n\n    this.toggle = e => {\n      this.setState(prevState => ({\n        editing: !prevState.editing\n      }));\n    };\n\n    this.state = {\n      listName: \"\",\n      cardName: \"\",\n      editCardName: \"\",\n      keyCard: \"\",\n      keyList: \"\",\n      inputKey: \"\",\n      dataLists: [],\n      dataCards: [],\n      editing: false\n    };\n  }\n\n  componentDidMount() {\n    // console.log(firebase)\n    const myList = fire.database().ref(\"lists/\"); // console.log(myList)\n\n    myList.on(\"value\", snapshot => {\n      const myListFromDatabase = snapshot.val();\n\n      if (myListFromDatabase === null) {\n        console.log(\"List at our firebase is null\");\n      } else {\n        const lists = Object.keys(snapshot.val()).map(key => {\n          return {\n            key: key,\n            listName: myListFromDatabase[key].listName\n          };\n        });\n        this.setState({\n          dataLists: lists\n        });\n      }\n    });\n    const myCard = fire.database().ref(\"cards/\"); // console.log(myCard)\n\n    myCard.on(\"value\", snapshot => {\n      const myCardFromDatabase = snapshot.val(); // console.log(myCardFromDatabase)\n\n      if (myCardFromDatabase === null) {\n        console.log(\"Card at our firebase is null\");\n      } else {\n        const cards = Object.keys(snapshot.val()).map(key => {\n          return {\n            key: key,\n            cardName: myCardFromDatabase[key].cardName,\n            listKey: myCardFromDatabase[key].listKey\n          };\n        });\n        this.setState({\n          dataCards: cards\n        });\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(CardDeck, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, this.state.dataLists.map((list, index) => {\n      const cards = this.state.dataCards.filter(card => card.listKey === list.key);\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: \"2.5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, list.listName, React.createElement(Button, {\n        onClick: () => {\n          this._handleDeleteList(list.key);\n        },\n        close: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      })), cards.map((card, indexTask) => {\n        return React.createElement(CardBody, {\n          key: indexTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }, React.createElement(CardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, card.cardName, React.createElement(Button, {\n          onClick: () => {\n            this._handleDeleteCard(card.key);\n          },\n          close: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        })), index >= 1 ? React.createElement(Button, {\n          onClick: () => {\n            this._handleMoveCard(card.key, index - 1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        }, \"Left\") : React.createElement(Button, {\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306\n          },\n          __self: this\n        }, \"Left\"), React.createElement(Button, {\n          onClick: () => {\n            this._handleChooseCard(card.key);\n\n            this.toggle();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(Modal, {\n          isOpen: this.state.editing,\n          toggle: this.toggle,\n          className: this.props.className,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          name: \"editCardName\",\n          value: this.state.editCardName,\n          onChange: this._handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          },\n          __self: this\n        })), React.createElement(ModalFooter, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329\n          },\n          __self: this\n        }, React.createElement(Button, {\n          onClick: () => {\n            this._handleEdit();\n\n            this.toggle();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(Button, {\n          color: \"secondary\",\n          onClick: this.toggle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }, \"Cancel\"))), index < this.state.dataLists.length - 1 ? React.createElement(Button, {\n          onClick: () => {\n            this._handleMoveCard(card.key, index + 1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344\n          },\n          __self: this\n        }, \"Right\") : React.createElement(Button, {\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352\n          },\n          __self: this\n        }, \"Right\")));\n      }), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"cardName\",\n        placeholder: \"Add a task\",\n        value: this.state.cardName,\n        onChange: this._handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: (key, title, index, e) => this._saveCard({\n          key: list.key\n        }, {\n          title: this.state.cardName\n        }, {\n          index: list.index\n        }, {\n          e\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, \"Save\"))))));\n    }), React.createElement(Col, {\n      sm: \"2.5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"listName\",\n      placeholder: \"Add a list\",\n      value: this.state.listName,\n      onChange: this._handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: () => this._saveList(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Save\")))))));\n  }\n\n}\n\nexport default Data;","map":{"version":3,"sources":["/Users/grantwatson/Desktop/Development/ReactJS/Watsyn-Jarvis/src/components/Data/Data.js"],"names":["React","Component","fire","CardDeck","Col","Card","CardHeader","Button","CardBody","CardText","CardFooter","Modal","ModalBody","ModalFooter","Data","constructor","_handleChange","e","setState","target","name","value","_saveList","state","listName","alert","newListKey","database","ref","push","key","update","_saveCard","title","index","cardName","newCardKey","listKey","_handleDeleteList","dataCards","console","log","countCardOnList","i","length","_handleDeleteCard","remove","myListLength","dataLists","myCardLength","_handleMoveCard","keyOfCard","moveByIndex","moveToAnotherList","newKeyOfCard","newCard","_handleChooseCard","indexOfCard","editCard","editCardName","keyCard","keyList","_handleEdit","toggle","prevState","editing","inputKey","componentDidMount","myList","on","snapshot","myListFromDatabase","val","lists","Object","keys","map","myCard","myCardFromDatabase","cards","render","list","filter","card","indexTask","props","className"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport fire from \"../Firebase/fire\";\nimport {\n    CardDeck,\n    Col,\n    Card,\n    CardHeader,\n    Button,\n    CardBody,\n    CardText,\n    CardFooter,\n    Modal,\n    ModalBody,\n    ModalFooter\n} from \"reactstrap\";\n\nclass Data extends Component {\n    constructor() {\n        super();\n        this.state = {\n            listName: \"\",\n            cardName: \"\",\n            editCardName: \"\",\n            keyCard: \"\",\n            keyList: \"\",\n            inputKey: \"\",\n            dataLists: [],\n            dataCards: [],\n            editing: false\n        };\n    }\n\n    componentDidMount() {\n        // console.log(firebase)\n        const myList = fire.database().ref(\"lists/\");\n        // console.log(myList)\n        myList.on(\"value\", snapshot => {\n            const myListFromDatabase = snapshot.val();\n            if (myListFromDatabase === null) {\n                console.log(\"List at our firebase is null\");\n            } else {\n                const lists = Object.keys(snapshot.val()).map(key => {\n                    return {\n                        key: key,\n                        listName: myListFromDatabase[key].listName\n                    };\n                });\n                this.setState({\n                    dataLists: lists\n                });\n            }\n        });\n\n        const myCard = fire.database().ref(\"cards/\");\n        // console.log(myCard)\n        myCard.on(\"value\", snapshot => {\n            const myCardFromDatabase = snapshot.val();\n            // console.log(myCardFromDatabase)\n            if (myCardFromDatabase === null) {\n                console.log(\"Card at our firebase is null\");\n            } else {\n                const cards = Object.keys(snapshot.val()).map(key => {\n                    return {\n                        key: key,\n                        cardName: myCardFromDatabase[key].cardName,\n                        listKey: myCardFromDatabase[key].listKey\n                    };\n                });\n                this.setState({\n                    dataCards: cards\n                });\n            }\n        });\n    }\n\n    _handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    _saveList = e => {\n        if (this.state.listName === \"\") {\n            alert(\"List cannot be empty\");\n        } else {\n            const newListKey = fire\n                .database()\n                .ref(\"lists/\")\n                .push().key;\n\n            fire\n                .database()\n                .ref(\"lists/\")\n                .update({\n                    [newListKey]: {\n                        listName: this.state.listName\n                    }\n                });\n            this.setState({\n                listName: \"\"\n            });\n        }\n    };\n\n    _saveCard = (key, title, index, e) => {\n        // console.log(\"key from card\");\n        // console.log(key.key);\n        // console.log(\"title from card:\");\n        // console.log(title.title);\n        if (this.state.cardName === \"\") {\n            alert(\"Card cannot be empty\");\n        } else {\n            const newCardKey = fire\n                .database()\n                .ref(\"cards/\")\n                .push().key;\n\n            fire\n                .database()\n                .ref(\"cards/\")\n                .update({\n                    [newCardKey]: {\n                        listKey: key.key,\n                        cardName: title.title\n                    }\n                });\n\n            this.setState({\n                cardName: \"\"\n            });\n        }\n    };\n\n    _handleDeleteList = key => {\n        const { dataCards } = this.state;\n        console.log(dataCards);\n        let countCardOnList = 0;\n\n        for (let i = 0; i < dataCards.length; i++) {\n            if (key === dataCards[i].listKey) {\n                countCardOnList++;\n            }\n        }\n        console.log(\"countCardOnList: \" + countCardOnList);\n        if (countCardOnList > 0) {\n            for (let i = 0; i < dataCards.length; i++) {\n                if (key === dataCards[i].listKey) {\n                    this._handleDeleteCard(dataCards[i].key);\n                }\n            }\n        }\n\n        fire\n            .database()\n            .ref(`lists/${key}`)\n            .remove();\n\n        console.log(\"Success delete List\");\n        const myListLength = this.state.dataLists.length;\n        if (myListLength === 1) {\n            this.setState({\n                dataLists: []\n            });\n        }\n    };\n\n    _handleDeleteCard = key => {\n        fire\n            .database()\n            .ref(`cards/${key}`)\n            .remove();\n\n        console.log(\"Success delete Card\");\n        const myCardLength = this.state.dataCards.length;\n        // console.log(myCardLength)\n        if (myCardLength === 1) {\n            this.setState({\n                dataCards: []\n            });\n        }\n    };\n\n    _handleMoveCard = (keyOfCard, moveByIndex) => {\n        const { dataCards, dataLists } = this.state;\n        // Get key from List destination movement\n        // console.log(keyOfCard);\n        const moveToAnotherList = dataLists[moveByIndex].key;\n        // console.log(moveToAnotherList);\n        let newKeyOfCard;\n        for (let i = 0; i < dataCards.length; i++) {\n            if (keyOfCard === dataCards[i].key) {\n                newKeyOfCard = i;\n            }\n        }\n\n        // console.log(newKeyOfCard);\n        const newCard = dataCards[newKeyOfCard];\n        // console.log(newCard);\n\n        fire\n            .database()\n            .ref(\"cards/\")\n            .update({\n                [newCard.key]: {\n                    listKey: moveToAnotherList,\n                    cardName: newCard.cardName\n                }\n            });\n    };\n\n    _handleChooseCard = key => {\n        // console.log(key);\n        const { dataCards } = this.state;\n        // console.log(dataCards);\n        let indexOfCard;\n        for (let i = 0; i < dataCards.length; i++) {\n            if (key === dataCards[i].key) {\n                // console.log(dataCards[i].cardName);\n                indexOfCard = i;\n            }\n        }\n\n        const editCard = dataCards[indexOfCard];\n        // console.log(editCard.cardName);\n\n        this.setState({\n            editCardName: editCard.cardName,\n            keyCard: key,\n            keyList: editCard.listKey\n        });\n    };\n\n    _handleEdit = () => {\n        const { editCardName, keyCard, keyList } = this.state;\n        // console.log(editCardName);\n        // console.log(keyCard);\n\n        if (editCardName !== \"\") {\n            // console.log(\"You can edit\");\n\n            fire\n                .database()\n                .ref(\"cards/\")\n                .update({\n                    [keyCard]: {\n                        cardName: editCardName,\n                        listKey: keyList\n                    }\n                });\n        } else {\n            // console.log(\"You can't edit\");\n            alert(\"Card cannot be empty\");\n        }\n    };\n\n    toggle = e => {\n        this.setState(prevState => ({\n            editing: !prevState.editing\n        }));\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <CardDeck>\n                    {this.state.dataLists.map((list, index) => {\n                        const cards = this.state.dataCards.filter(\n                            card => card.listKey === list.key\n                        );\n                        return (\n\n                            <div key={index}>\n                                <Col sm=\"2.5\">\n                                    <Card>\n                                        <CardHeader>\n                                            {list.listName}\n                                            <Button\n                                                onClick={() => {\n                                                    this._handleDeleteList(list.key);\n                                                }}\n                                                close\n                                            />\n                                        </CardHeader>\n                                        {cards.map((card, indexTask) => {\n                                            return (\n                                                <CardBody key={indexTask}>\n                                                    <div>\n                                                        <CardText>\n                                                            {card.cardName}\n                                                            <Button\n                                                                onClick={() => {\n                                                                    this._handleDeleteCard(card.key);\n                                                                }}\n                                                                close\n                                                            />\n                                                        </CardText>\n                                                        {index >= 1 ? (\n                                                            <Button\n                                                                onClick={() => {\n                                                                    this._handleMoveCard(card.key, index - 1);\n                                                                }}\n                                                            >\n                                                                Left\n                              </Button>\n                                                        ) : (\n                                                                <Button disabled>Left</Button>\n                                                            )}\n                                                        <Button\n                                                            onClick={() => {\n                                                                this._handleChooseCard(card.key);\n                                                                this.toggle();\n                                                            }}\n                                                        >\n                                                            Edit\n                            </Button>\n                                                        <Modal\n                                                            isOpen={this.state.editing}\n                                                            toggle={this.toggle}\n                                                            className={this.props.className}\n                                                        >\n                                                            <ModalBody>\n                                                                <input\n                                                                    type=\"text\"\n                                                                    name=\"editCardName\"\n                                                                    value={this.state.editCardName}\n                                                                    onChange={this._handleChange}\n                                                                />\n                                                            </ModalBody>\n                                                            <ModalFooter>\n                                                                <Button\n                                                                    onClick={() => {\n                                                                        this._handleEdit();\n                                                                        this.toggle();\n                                                                    }}\n                                                                >\n                                                                    Edit\n                                </Button>\n                                                                <Button color=\"secondary\" onClick={this.toggle}>\n                                                                    Cancel\n                                </Button>\n                                                            </ModalFooter>\n                                                        </Modal>\n                                                        {index < this.state.dataLists.length - 1 ? (\n                                                            <Button\n                                                                onClick={() => {\n                                                                    this._handleMoveCard(card.key, index + 1);\n                                                                }}\n                                                            >\n                                                                Right\n                              </Button>\n                                                        ) : (\n                                                                <Button disabled>Right</Button>\n                                                            )}\n                                                    </div>\n                                                </CardBody>\n                                            );\n                                        })}\n                                        <CardFooter>\n                                            <div className=\"row\">\n                                                <input\n                                                    type=\"text\"\n                                                    name=\"cardName\"\n                                                    placeholder=\"Add a task\"\n                                                    value={this.state.cardName}\n                                                    onChange={this._handleChange}\n                                                />\n                                                <Button\n                                                    onClick={(key, title, index, e) =>\n                                                        this._saveCard(\n                                                            { key: list.key },\n                                                            { title: this.state.cardName },\n                                                            { index: list.index },\n                                                            { e }\n                                                        )\n                                                    }\n                                                >\n                                                    Save\n                        </Button>\n                                            </div>\n                                        </CardFooter>\n                                    </Card>\n                                </Col>\n                            </div>\n                        );\n                    })}\n                    <Col sm=\"2.5\">\n                        <Card>\n                            <CardHeader>\n                                <div className=\"row\">\n                                    <input\n                                        type=\"text\"\n                                        name=\"listName\"\n                                        placeholder=\"Add a list\"\n                                        value={this.state.listName}\n                                        onChange={this._handleChange}\n                                    />\n                                    <Button onClick={() => this._saveList()}>Save</Button>\n                                </div>\n                            </CardHeader>\n                        </Card>\n                    </Col>\n                </CardDeck>\n            </div>\n        );\n    }\n}\n\nexport default Data;"]},"metadata":{},"sourceType":"module"}